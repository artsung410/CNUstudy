타입시스템?
C#에선 헤더를 포함 시켜주지 않아도 된다

C#배열
1차원 배열
	int[] arr = new int[5]; // int arr[5]; 와 같다.
 
초기화
	arr = new int[5] { 1, 2, 3, 4, 5 };
	arr = { 1, 2, 3, 4, 5 };
 
원소 접근
	arr[1]; // C++과 같다. 인덱서?
 
다차원 배열
	- 차원수 만큼 , 붙여준다
	int[,] arr2 = new int[5, 5]; // int arr[5][5];와 같다.
 
초기화
	- 초기화 없을시 기본값으로 세팅된다
	arr2 = new int[5, 5] { { 1, 2, 3 }, { 4, 5, 6 }};
	arr2 = { { 1, 2, 3 }, { 4, 5, 6 } };
 
원소 접근
	arr[1, 2]; // 문법에 주의한다. 값은 6이다.
		-> arr[1][2]과 같다
 
가변 배열(Jagged Array) : 배열의 배열(배열타입에 대한 배열?)
C#
	int[][] arr = new int[3][];
	arr[0] = new int[2] {1 2}
	arr[1] = new int[4] {1 2 3 4 }
	arr[2] = new int[3] {1 2 3}

C++
	int** arr = new int*[3]
	arr[0] = new int[2] { 1 2 }
	arr[1] = new int[4] {1 2 3 4}
	arr[2] = new int[3] {1 2 3}
	
	- 다차원배열은 연속적으로 메모리에 담기지만
	- 가변배열은 연속적이지 않다. 각각따로 주소에 배열이 담겨있다

배열정렬
	using System
	int[] arr = {2 3 4 1 5}
	Array.Sort(arr)

원소 접근
	arr[1][2]; // 3
	
함수
	문법은 c++과 같으며 기본인자 및 오버로딩 가능
	
간접참조
	- C#은 포인터 없음(제한적인 경우에만 사용), 레퍼런스는 존재하나 눈에 보이지 않는다
	- 간접참조 가독성을 위해 매개변수한정자 지원
		- ref
			- 인자가 반드시 초기화 되어 있어야 한다
			- 초기화하지 않으면 컴파일 오류
			- 호출할때 ref키워드 꼭 적어야함
		- in
			- 인자 초기화 필수(컴파일 오류남)
		- out
			- 함수가 끝나기 전 반드시 어떤 값이 할당되어야함
			- 호출시 out키워드 적어야한다
			
클래스관련
	- c++과 동일하게 필드와 메소드를 작성할수있으나, 문법차이존재
		> 접근한정자 매번 기입해야한다
	- 상속시 public을 안써도 된다
	- 다중상속을 지원하지 않는다
	- 참조타입 == C++레퍼런스와 동일
	- 인스턴스는 힙에 만들어지고 인스턴스의 변수는 지정한 변수에 담긴다
	- 클래스로 만든 변수는 참조타입
		> 참조타입의 변수는 실체화된 오브젝트가 아님
		> 참조타입변수를 선언하는 것만으로는 오브젝트가 생성되지 않기 때문에 new를 사용해 오브젝트를 개별적으로 생성해야한다
			- 결론: 참조타입의 변수는 항상 레퍼런스로 생각하면 된다

유니티
	태그 -> 그룹화 하는것
	스크립트순서는 임의의 순서로 호출된다
		> 스크립트 순서를 지정하려면 edit -> project setting -> script execution order 들어가서 스크립트순서를 정해줄수있다.