프로퍼티?

유니티 이벤트(Unity Event)
	편의를 위해 이벤트함수 정의
	정의된 순서, 특정 조건 만족시 자동으로 호출
		초기화 -> 에디터실행 -> 물리 -> 입력이벤트 -> 로직 -> Scene rendering -> Gizmo rendering -> GUI rendering -> End of frame -> Pausing -> Decommissioning
	
	이벤트함수 분류
		- First Scene Load
		- Editor
		- Before the first frame update
		- In between frames
		- Update order
		- Animation update loop
		- Rendering
		- Coroutines
		- When the object is destroyed
		- When quitting
		
Time.deltaTime
	delta -> 값의 차이
	deltaTime -> 시간의 차이
		- 지난 프레임이 완료하는데 걸린시간
	
	이동값 * deltaTime -> 이동이 어느 환경이든 동일함\
	이동이나 회전등 움직임에 있어 시간의 영향을 받는 기능을 만들때는
	값에 deltaTime을 곱해 흘러간 프레임 시간만큼만 가중치를 줌으로써 프로세서 속도의 영향으로 자유로워 질수있다.
	
커스텀 컴포넌트와 스크립트 작업기초?
	- 변수의 공개 수준 결정
		- 유니티 엔진은 코드를 변경하고 저장하면 프로젝트에 포함된 코드전체를 재빌드한다
		- 만일 스크립트내에서만 변수값을 재조정하게한다면 개발시간이 낭비될것이다
		- 따라서 테스트, 밸런스 조정을위한 변수들은 외부공개하여 시간소비를 줄일수있다
	
	
[SerializeField]
	인스펙터에서 수정가능하도록 하는 어트리뷰트
	외부 스크립트에선 접근 불가능한 private나 protected같은 변수에 인스펙터상으로 접근하기위해 쓴다
	즉, 게임오브젝트나 컴포넌트들을 연결할때 인스펙터에서만 관리하게끔 만든다



======================================	
유니티 hinge joints
유니티 자석효과

타일형 게임
- 이동후 인덱스바뀌는부분과 바뀐 인덱스를 관리하는 부분

오클루전 컬링
	- 뷰에서 가려진 게임오브젝트에 대한 렌더링 계산을 수행하지 못하도록하는 프로세스
	- 세부사항을 표현하고싶다면 occluder를 줄인다
	
기능을 쪼개서 main씬에다 한번에 넣지 말고 씬을 나눠서 기능구현후 부착하는식으로 개발해야한다

==============================================
유니티의 메시지와 브로드캐스팅 시스템
	- 독립적인 형태의 컴포넌트 내부에 있는 메소드를 실행시키기 위해 사용하는 방법

초기화를 위한 이벤트함수
	호출순서: Awake -> OnEnable -> Start
	
	Awake: 씬이 시작될때 1회 호출
		- 데이터를 초기화하는 목적
		- 씬 실행 직후 1회 호출
		- 게임오브젝트가 활성화 되어 있을때 호출
			- Awake메소드가 포함된 컴포넌트가 비활성화 되어 있어도 호출된다
			- 게임오브젝트가 비활성화 되어 있을경우 호출되지 않고 게임오브젝트가 활성화 되었을때 호출된다
			
				게임오브젝트 | 컴포넌트 | 실행
				활성화			활성화		o
				활성화			비활성화	o
				비활성화		비활성화 	x
				비활성화		활성화		x
			
	Start: 첫번째 Update호출 직전 1회 호출
		- 초기화를 목적으로 만들어진 이벤트함수
		- 첫번째 프레임 업데이트가 실행되기 직전에 1회호출
			호출순서: Awake -> Start
		- Start 메소드는 게임 오브젝트, 컴포넌트가 활성화 되었을 때만 호출
			
			게임오브젝트 | 컴포넌트 | 실행
			활성화			활성화		o
			활성화			비활성화	x
			비활성화		비활성화	x
			비활성화		활성화		x
		
		- 코루틴 형태로 호출이 가능하다
			ex) private IEnumerator Start()
			
	OnEnable: 컴포넌트가 활성화 될때마다 1회 호출
		- 컴포넌트가 비활성화 되었다가 다시 활성화 될 때 마다 1회 호출된다
			호출순서: Awake -> OnEnable -> Start
		- OnEnable메소드는 게임 오브젝트, 컴포넌트가 활성화 되었을때만 호출된다
			
			게임오브젝트 | 컴포넌트 | 실행
			활성화			활성화		o
			
	
업데이트를 위한 이벤트함수
	Update: 씬이 시작된후 매 프레임 호출
		- 현재 씬이 실행된 후 매 프레임마다 호출
		- 게임오브젝트, 컴포넌트가 활성화 되었을때만 호출
		
	LateUpdate: 현재 씬의 모든 Update메소드 실행 직후 호출
		- 현재 프레임에서 모든 게임오브젝트의 Update가 호출된 후 호출
		- 게임오브젝트, 컴포넌트가 활성화 되었을때만 호출
		
			cf)
			LateUpdate의 경우 플레이어 캐릭터, 카메라와 같이 서로다른 오브젝트가 존재할때
			즉, 플레이어 캐릭터를 쫒아다니는 카메라를 구현하는 경우엔
			플레이어 캐릭터가 Update를 이용해 움직이고 난 후 카메라는 
			LateUpdate에서 플레이어의 위치를 바탕으로 이동한다
			
	FixedUpdate: 1초에 정해진 횟수만큼 호출(50회정도)
		- 프레임의 영향을 받지않고 정해진 횟수만큼 호출
		- 기본값은 0.02로 1초에 50회호출
			Edit - Project Settings - Time의 Fixed Timestep에서 호출 주기 설정가능
		- FixedUpdate 메소드는 게임오브젝트, 컴포넌트가 활성화 되었을때만 호출
		
	Update, LateUpdate는 FPS의 영향을 받아 호출횟수가 다르게 설정된다. FixedUpdate는 매 초마다 동일한 횟수만큼 호출된다.
	
해체를 위한 이벤트 함수
	OnDestroy: 게임오브젝트가 파괴될때 1회 호출
		- 게임오브젝트가 파괴될 때 1회 호출
			- 게임 실행중 해당 오브젝트를 삭제하니까 실행되는걸 확인할수있었다
		- 씬이 변경되거나 게임이 종료될 때도 오브젝트가 파괴 되기 때문에 호출된다
		- 게임오브젝트가 활성화 되어있을때 호출된다
			- 컴포넌트가 비활성화 되어있어도 호출
			- 게임오브젝트가 비활성화 되어있을경우 게임오브젝트가 활성화 되었을때 호출
				
				게임오브젝트 | 컴포넌트 | 실행
				활성화			활성화		o
				활성화			비활성화	o
				비활성화		활성화		x
				비활성화		비활성화	x
				
	OnApplicationQuit: 게임이 종료될때 1회 호출
		- 게임종료시 1회 호출
			- Unity Editor에선 플레이모드 중지시 호출
		- 게임오브젝트가 활성화 되어있을때 호출된다
			- 컴포넌트가 비홠거오하 되어 있어도 호출된다
		cf) 씬이 종료될때 모든 오브젝트 메모리를 삭제하기 때문에 OnDestroy메소드도 같이 호출된다
		
	OnDisable: 컴포넌트가 비활성화 될때마다 1회 호출
		- 컴포넌트가 비활성화 될 때 마다 1회 호출
		- 게임오브젝트, 컴포넌트가 활성화 되었을때만 호출

기즈모를 위한 이벤트 함수
	OnDrawGizmos
		- Scene View에만 출력되는 선, 도형
		- 게임제작시 광선, 충돌범위와 같이 눈에 보이지 않는 것을 확인할 때 사용하는 이벤트 함수
		- 게임오브젝트가 활성화 되어있을때 호출
			- 컴포넌트가 비활성화 되어있어도 호출된다
			
				게임오브젝트 | 컴포넌트 | 실행
				활성화			활성화		o
				활성화			비활성화	o
				비활성화		활성화		x
				비활성화		비활성화	x
		
		- Gizmos클래스는 OnDrawGizmos메소드 내부에서만 제대로 작동한다
		
=============================
Invoke()
	- 함수 시작 시간 지연기능
	- cpu최적화 및 함수실행순서 조절에 유용함
	Invoke("메서드", 지연시킬 시간)
	
	지연반복기능
	InvokeRepeating("메서드", 처음지연시간, 지연후 반복시간)
		- 처음 함수를 실행할때, 일정시간 지연후, 일정시간마다 반복가능
		
	반복멈추기기능
	CancellInvoke("반복중인 인보크함수")
