열거형 
	문법은 cpp와 같으나 차이점 존재
	1. int 타입으로 암시적형변환 일어나지않음
		- 명시적 형변환 해야한다
	2. 열거형으로 만든 기호상수 사용시 열거형을 앞에 적어줘야함
		- 이름공간이 따로 있다
		ex) State.Ready
	3. cpp보다 풍성한 기능을 지원한다
		- 이름이 나온다(기호상수 그 이상의 기능있음)
		- 순회할수있다
		
반복자 메서드(iterator method)
	- IEnumerable / Ienumerator를 반환타입으로 가지는 메서드
	- 반복자 메서드에서는 yield문 사용 가능
	- yield문을 만나면 실행을 중단한다
		> yield return: 반환값과 함께 중단
			- 데이터셋으로부터 데이터를 하나씩 호출자에게 보낸다
			- 한번 호출시 다음 yield return 문의 값을 반환
		> yield break : 반환값 없이 중단
	- MoveNext()가 호출될때마다 이전에 중단됐던 지점부터 실행
	- 메서드가 끝나거나 yield문을 만날때 까지 실행
	
	많은일을 순차적으로 실행하기위해서 사용된다
		- 기존의 함수 구조에선 함수가 호출되면 한번에 일을 처리해야만 했으나 yield가 등장하면서 원하는 일을 한번씩 순차적으로 여러번 실행할수있게되었다
	
	
코루틴(Coroutine)
	코루틴은 멀티스레드 동작이 아니다
	반복자 메서드를 활용해 함수의 명시적 실행 없이도 내부적으로 알아서 실행 시켜주는 시스템
	- 시간 혹은 순차적 처리를 구현할 때 직관적으로 코드를 작성할수있어 유용
	- C#의 반복자 메서드를 이용해 구현되었다
		WaitForSeconds : ~초 동안 중단
		
Ray Cast
	레이어(Layer)
		- 충돌처리를 위한 개념
		- 태그와 비슷하게 그룹화할수있지만 그 목적이 다르다
			태그는 이름으로 그룹화하나 레이어는 충돌처리하기 전 어떤 물체를 검사할지 구분하기위한 용도
	레이어마스크
		레이캐스팅할때 무시할 레이어 정해줌
		
레이어(Layer)
	씬에 존재하는 게임 오브젝트를 구분할 수 있게 해주는 도구
	- 충돌검출에 활용
	- 레이어 마스크를 이용하면 성능향상의 이점이 있다

레이캐스트
	Ray기반으로 충돌 검출 하는것
	
확장메서드
	확장메서드는 기존 타입에 메서드를 추가할수있게한다
	정적메서드로 구현하며 첫번째매게변수에 this키워드와 함게 확장시킬 타입을 적는다
	확장메서드는 확장하는 타입의 private에 접근할 수 없다 -> 캡슐화 원칙 위배불가
	
C#의 객체지향 프로그래밍
	가상함수는 virtual키워드
	오버라이딩은 override 키워드
	추상클래스 / 메서드를 만들려면 abstract 키워드
		> 추상 메서드는 반드시 자식에서 오버라이딩 해야한다
	
유니티 간접참조
	ref
		- 인자가 전달전에 초기화
		- 기존 변수를 메서드에서 수정할때사용
	in
		- 인자가 전달전에 초기화 되어야한다
		- 매개변수 한정자
	out
		- 매개변수 한정자
		- 함수가 끝나기전 반드시 어떤 값이 할당되어야함
		- 메서드 내에서 생성된 값 반환할시 사용

운동학
	순운동학(FK: Forward Kinematics)
		- 상위 조인트의 변환에 따라 하위 조인트도 같이 변환이 되는 것
	역운동학(IK: Inverse Kinematics)
		- 하위 조인트의 변환에 따라 상위 조인트도 같이 변환이 되는 것
	OnAnimatorIK() : IK가 적용될 때 마다 호출
		> SetIKPosition() / SetIKPositionWeight() / SetIKRotation() / SetIKRotationWeight()
		
가상함수
class Base
{
	public virtual void Foo()
	{
		Base의 Foo
	}
}

순수가상함수
class Derived : Base
{
	public override void Foo()
	{
		base.Foo();
	}
}

추상클래스
abstract class AbstractBase
{
	public abstract void Foo();
}

추상메서드도 오버라이드 가능
추상메서드는 구현을 강제한다

가상함수는 구현강제성없음 존재할수도있고 않을수도있다

추상클래스는 단일상속, 인터페이스는 다중상속가능

추상클래스는 클래스이기에 메서드 외 다양한걸 저장할수있다
	멤버가 메서드말고 프로퍼티, 필드를 저장할수있다

인터페이스는 오로지 메서드만 저장할수있다

인터페이스는 메시지를 정의
	커피만들기
	사용할수있다
	
추상클래스는 역할을 정의
	바리스타
	아이템

====================================================================

