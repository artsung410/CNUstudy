파일다루기

파일이란, 컴퓨터 저장매체에 기록되는 데이터의 묶음이다. 디렉터리는 파일이 위치하는 주소로 폴더라고 부른다.
.NET은 파일과 디렉터리정보를 다루기위해 system.IO아래에 관련 클래스를 제공한다
	
	클래스명	|	설명
	File			파일의 생성, 복사, 삭제, 이동, 조회를 처리하는 정적메소드 제공
	FileInfo		File클래스와 동일한 기능, 정적메소드 대신 인스턴스메소드 제공
	Directory		디렉터리의 생성, 삭제, 이동, 조회를 처리하는 정적메소드 제공
	DirectoryInfo	Directory클래스와 동일한기능, 정적메소드 대신 인스턴스메소드 제공
	
	* 하나의 파일에 한두가지 정도의 작업을 할땐 정적메소드를 제공하는 클래스를 사용하고, 여러작업을 수행할땐 인스턴스 메소드를 이용하는 규칙이 있다

파일의 입/출력을 배우기에 앞서 알아둬야할 개념들이 있다. Stream은 "데이터가 흐르는 통로"를 뜻한다. 메모리에서 하드로 데이터를 옮길땐 먼저 Stream을 만들어 둘 사이를 연결해야한다. 이때 Stream을 통과하는 단위는 바이트 단위이다. 반대의 경우도 마찬가지
Stream은 데이터의 흐름이기 때문에  순서대로 읽고 쓰는것이 보통이다. 이를 순차접근방식 이라고 한다.
이러한 구조는 네트워크나 데이터 백업 장치의 데이터 입출력구조와도 통하기때문에 Stream을 이용하면 파일이 아닌 네트워크를 향해 데이터를 흘려보내거나 백업장치를 통해 데이터를 기록, 읽기가 가능하다.
	-> Stream은 데이터가 흐르는 통로, 0과 1 단위로 통과된다, 순차접근방식과 임의접근방식이 있다.

StreamClass는 추상클래스이기 때문에 직접적으로 인스턴스를 만들수없어 파생된클래스를 이용해야한다.
이러한 구조는 스트림이 다루는 다양한 매체나 장치들에 대한 파일입출력을 Stream모델 하나로 다루기위해서다.
	
		다양한 파생 클래스계보
	FileStream		|	디스크파일에 데이터 기록
	NetWorkStream	|	네트워크 피어에 데이터 전송
	GZipStream		|	데이터를 GNU ZIP 형식으로 압축
	BufferedStream	|	데이터를 메모리 버퍼에 담아뒀다 일정량 쌓이면 파일이나 네트워크에 기록
	
파생된 클래스들은 반환 값으로 Stream타입을 반환하고 있다.
예시) Stream stream1 = new FileStream("a.dat", FileMode.Create)
이처럼 자식클래스로 생성해 부모데이터타입으로 반환값을 가지는것을 "업캐스팅"이라고 한다. 반대의 경우는 "다운캐스팅"이라고 한다.
	-> 스트림클래스: 추상클래스
		추상클래스 
		- 인스턴스를 직접만들어 사용할수 없다.(new Stream 불가능)
			이유: 다양한 매체나 장치들에 대한 파일입출력을 스트림 모델 하나로 다룰수있도록하려고
			
		업캐스팅
		- 자식클래스로 생성해서 부모데이터타입으로 반환값을 갖는것(반대는 다운캐스팅)
	
직렬화: 객체의 상태(객체의 필드에 저장된 값들)를 메모리나 영구저장장치에 저장가능한 0과 1의 순서로 바꾸는것
	- 0과 1로 바꾸는 이유: 저장공간의 통로는 스트림이고, 스트림은 이진수만 통과된다
역직렬화: 직렬화의 반대

직렬화하고 싶지않은 필드처리 -> [NonSerialized]

이벤트 기반 프로그래밍: 컴퓨터에 발생하는 이벤트에 반응하는 프로그램을 만드는것

패러다임: 프로그래밍의 철학?, 설계방향성?
	- 객체지향프로그래밍, 이벤트기반프로그래밍등 
	- C#은 멀티패러다임

콜백 == 부탁

대리자: delegate, 콜백을 맡아 실행하는 일을 담당

대리자에 주소를 할당해주면 대리자가 메소드를 호출해준다 -> 함수에도 주소가 있다

대리자는 인스턴스가 아닌 형식(type) -> 데이터 타입을 선언하듯 대리자를 선언함

대리자의 인스턴스를 만들때도 new연산자가 필요하다

대리자가 맡는 역할이 많아질수록 일관성을 가진다 

값이 아닌 코드자체를 매개변수에 넘기고 싶을때 대리자를 활용할수있다

대리자는 메소드에 대한 참조, 비교메소드를 참조할 대리자를 매개변수에 받을수있도록 작성할수있다

형식매개변수의 제약조건 where T

대리자 체인: 대리자 하나가 여러개의 메소드를 동시에 참조가능

