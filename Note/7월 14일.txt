벡터수학이 참 중요허다

벡터는
	- 공간상의 화살표
	- 나열된 숫자 데이터를 묶는 단위
	- 벡터 연산을 만족하며 정해진 개수의 원소를 가짐
	- 시점과 종점으로 이루어졌으며 어느 좌표에 존재하든 방향과 크기는 변하지 않는다
덧셈
	v1 = [1 2]
	v2 = [2 3]
	
	v1 + v2 = [1+2 2+3]
	교환법칙 성립
	v1 + v2 = v2 + v1
뺄셈
	덧셈과 동일하게 연산하고
	연산 순서에 따라 방향이 바뀐다
	

스칼라곱/나눗셈
	2 * v1 = [2*1 2*2]
	힘의 방향은 일정하지만 크기는 스칼라값과 같은 벡터를 얻을수있다
	음수를 곱할시 역방향의 벡터를 얻을수있다
	
크기(magnitude)
	sqrt(a^2 + b^2) 즉, 피타고라스정리 삼각형의 빗변 크기다
	벡터를 자신의 크기로 나누면 크기가 1인 벡터가된다
	크기가 1인 벡터 => 방향벡터 => 노멀라이즈 벡터 => 단위벡터
		-> 크기를 1로 만드는 과정 정규화(Normalize)
	
내적(dot product)
	v1 ● v2
	두 벡터 사이의 스칼라 값
	두 벡터의 크기를 곱하고 그 결과에 두 벡터 사이의 각에 대한 코사인을 곱한것과 같다
	a•b = |a||b|cosθ
	방향판단에도 내적사용
	내적을 이용해 두 벡터사이의 각도를 알수있다
		단위벡터일경우 |a| = 1, |b| = 1
		따라서 a•b = cosθ
		이때 θ의 값을 구할수 있다
	
	
외적(cross product)
	v1 x v2
	오른손나사법칙, 왼손나사법칙이 있다
	엄지가 출력벡터의 방향
	파라미터 순서가 바뀌면 같은크기 역방향을 가리킨다
	외적은 컨텐츠상에서 오른쪽, 왼쪽구분에 사용할수있다

노멀/수직벡터
	평면에 수직인 벡터(법선벡터)는 메시 생성중 자주 사용, 경로 추적에도 사용
	왼손규칙은 두 벡터를 외적함수에 전달해야하는 순서결정에 사용
	법선벡터의 y값으로 위/아래 구별가능(양수/음수)
	
정적변수
	월드좌표(가상세계의 절대좌표)기준
	back
	down
	forward
	left
	right
	up
	zero(0벡터)
	one(단위벡터)
노멀벡터
	.magnitude 벡터의크기
	.normalized 정규화
	.sqrMagnitude 벡터의크기^2(루트연산은 시간이 걸리므로 더 빠른연산을위해 제곱사용)
	.x == [0], .y == [1], .z == [2] 접근가능
	new Vector3 생성자
	
	.Angle() 두 벡터간의 각도
	.Cross() cross product
	.Dot() dot product
	.Distance() 두 벡터사이의 거리 == distanceVector.magnitude
	.Max(), .Min() 두 벡터중 최대/ 최소
	.Normalize() 정규화 == vector.normalized
	.Project() 한쪽으로 사영한 벡터를 얻는다
	
쿼터니언(Quaternion)
	등장배경: 짐벌락 극복
		짐벌락
			- 같은 방향으로 오브젝트의 두 회전 축이 겹치는 현상
			- 짐벌락이 발생하면 그 축으로는 회전하지 않는다
			- 오일러 회전 환경에서 발생한다
				> 왜 오일러? 오일러환경은 각 축을 독립적으로 평가
			- 위와 같은 문제를 방지하기위해 쿼터니언 등장
	
	유니티엔진에선 쿼터니언 사용
	.LookRotation 바라보기위한 회전이 필요할때 회전값을 생성하는데 사용
		- .LookAt 은 회전값을 생성하고 그 값을 적용함
