라이트컴포넌트

apply root mode?
	
유한상태머신?
	한번에 하나 - 장점이자 단점
	
휴머노이드 애니메이션 
	다운로드사이트 mixamo
	
유니티최적화방법중하나는 연산순서를 어떻게 두느냐에 따라 달라진다
	
	ex)
	float movementAmount = MoveSpeed * Time.fixedDeltaTime;
	Vector3 direction = _input.MoveDirection * transform.forward;
	Vector3 offset = direction * movementAmount;
	
	transform.forward * MoveSpeed * Time.fixedDeltaTime * _input.MoveDirection
		- Vector3 연산이 3번이루어진다
	MoveSpeed * Time.fixedDeltaTime * _input.MoveDirection * transform.forward
		- float float float Vector3 -> vector3연산이 1번이루어진다
	
	- 같은 값을 도출하는 연산이라도 순서가 어떻게하냐에따라 처리속도에서 차이가난다(메뉴얼참조)
	
버추얼카메라
	하드존?
	
클래스경우 단일상속만 지원한다
인터페이스는 예외로 다중상속지원
	> 인터페이스 = 메시지
	
추상클래스와 인터페이스의 차이를 명확히 구분할줄알아야한다
	- 인터페이스는 왜 쓰는가?
		프로그램을 객체지향적으로 설계하기위한 메시지를 정의하기위해
		결합도를 느슨하게 유지할수있는 이점도 가져갈수있다
		
Line Renderer?

ScriptableObject
	인스턴스와 별도로 대량의 데이터를 저장하는데 사용하는 데이터 컨테이너
	
리플렉션
	GUI툴 만드는데 유용하다
	
[Obsjolete("더이상 지원 안됨")]
	함수 바로앞에 사용하면 사용되지않는 함수를 쉽게 구분할수있다

추가적인 정보를 코드로 표현할 수 있다?

==========================================

라이트
	- 라이트연산은 비싸다
	- 웬만하면 정보를 저장해 놓는다 -> 미리 연산해야한다 -> 라이트맵(Light Map)
	- 글로벌 일루미네이션(GI: Global Illumination) : 간접광 계산
		- 다른 물체에 반사된 반사광까지 계산
	유니티에서 제공하는 라이트종류
		- point
		- spot
		- direction
		
애니메이션
	- 레이어를 여러개 사용해 동시에 여러상태를 한꺼번에 표현가능
		> 위에서 아래로 차례대로 오버라이딩
		> 오버라이딩을 하기 위해선 아바타 마스크를 생성해야한다
	- 자연스러운 애니메이션을 위해 블렌드 트리사용
		> 블렌드트리?!
	- 휴머노이드 릭(Humanoid Rig)
		> Rigging: 모델의 골격과 움직임을 정의하는 조인트 계층구조를 만드는것
		> 사람형태모델은 위 휴머노이드 릭 사용
			- 휴머노이드 릭을 사용하기 때문에 모델의 골격이 달라도 Retargetting하여 애니메이션 재사용 가능
			
시네머신
	- 자연스러운 카메라 연출을 위한 패키지
	- 브레인카메라
		- 모니터로 화면 송출역할
	- 가상카메라
		- 카메라 연출에 필요한 데이터 저장역할
		
깨알 최적화 팁
	Vector나 Quaternion사용시 연산 순서에 주의해서 식 작성
		- 연산순서가 어긋나면 무거운 연산을 반복하게된다

인터페이스
	- 객체지향 프로그램에서 메시지를 정의할 수 있는 도구
	- 인터페이스는 여러개 구현 가능(한 클래스에 여러개 정의가능)
	- 인터페이스를 상속한다면 반드시 해당 인터페이스에 정의된 메시지를 재정의해야한다
	- 인터페이스를 활용하면 코드간에 느슨한 결합도를 유지 할수있다 -> 느슨한 커플링(Loose Coupling)
	
파티클 시스템
	- 형태가 고정되지 않은 동적 오브젝트를 표현하기 위해 사용(물, 불, 연기 등)

스크럽터블 오브젝트
	- 여러 데이터를 저장할수있는 데이터 컨테이너
	- 에디터 상에서 데이터 수정가능
	- 프로그램내 데이터 사본은 하나만 생성
		- 각 인스턴스마다 데이터를 들고 있지 않음
	- ScriptableObject를 상속하면 생성할수있다
	
리플렉션과 특성
	- 리플렉션(Reflection)은 동적으로 타입에 대한 정보를 제공하는 시스템
	- GUI툴을 만들때 유용하다
	- Attribute는 C#언어의 구성요소중 하나로 클래스, 메서드, 필드 등의 요소에 대한 메타데이터를 제공하는 특수한 클래스
		> Attribute상속시 특성을 만들수있음